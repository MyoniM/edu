input -> _ value _ {% (data) => data[1] %}

value
    -> number {% id %}
    | boolean {% id %}
    | myNull  {% id %}
    | string  {% id %}
    | array   {% id %}

myNull -> "null"
    {% () => null %}

boolean
    -> "true"
        {% () => true %}
    | "false"
        {% () => false %}

number
    -> digits "." digits {% (data) => Number(data[0] + "." + data[2]) %}
    |  digits  {% (data) => Number(data) %}

digits
    -> digit {% id %}
    |  digit digits
        {% (data) => data.join("") %}

digit -> [0-9] {% id %}

string -> "\"" characters "\""  {% (data) => data[1] %}

characters
    -> character {% id %}
    |  character characters
         {% (data) => data[0] + data[1] %}

character
    -> [^\"\\] {% id %} # all except " & \
    |  "\\" escape
        {% data => data[1] %}

escape
    -> "\"" {% () => '"' %} 
    |  "\\" {% () => '\\' %} 
    |  "/"  {% () => '/' %} 
    |  "b"  {% () => '\b' %} 
    |  "f"  {% () => '\f' %} 
    |  "r"  {% () => '\r' %} 
    |  "n"  {% () => '\n' %} 
    |  "t"  {% () => '\t' %} 
    |  "u"  hex hex hex hex
        {% (data) => {
            const code = (((((data[1] * 16) + data[2]) * 16) + data[3]) * 16 + data[4]);
            return String.fromCharCode(code);
        } %}

hex 
    -> digit {% (data) => Number(data[0])%}
    |  [a-fA-F]
        {% 
            (data) => {
                switch (data[0].toLowerCase()) {
                    case "a": 
                        return 10;
                    case "b": 
                        return 11;
                    case "c": 
                        return 12;
                    case "d": 
                        return 13;
                    case "e": 
                        return 14;
                    case "f": 
                        return 15;
                } 
            }
        %}

array
    -> "[" _ arrayItems _ "]" {% (data) => data[2] %}
    | "[" _ "]" {% () => [] %}

arrayItems
    -> value
    |  value _ "," _ arrayItems {% (data) => [data[0], ...data[4]] %}


_ -> [ \t]:* # 0 or more occurence